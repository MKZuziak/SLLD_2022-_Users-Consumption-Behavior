points(med[1], med[2], col='red', pch=16)
abline(h=med[2], lty=2) # h - the y-values(s) for horizontal line(s)
points(exemplary_entry[,1], rep(med[2], length(exemplary_entry[,1])), col='red')
var(exemplary_entry[,1])
# For the vertical-axis, x = med[1]
abline(v=med[1], lty=2) # v - the x'value(s) for horizontal line(s)
points(rep(med[1], length(exemplary_entry[,1]), exemplary_entry[,2], col='blue')
# For the horizontal axis y = med[2]
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
abline(h=med[2], lty=2) # h - the y-values(s) for horizontal line(s)
points(exemplary_entry[,1], rep(med[2], length(exemplary_entry[,1])), col='red')
var(exemplary_entry[,1])
# For the vertical-axis, x = med[1]
abline(v=med[1], lty=2) # v - the x'value(s) for horizontal line(s)
points(rep(med[1], length(exemplary_entry[,1]), exemplary_entry[,2], col='blue'))
# For the horizontal axis y = med[2]
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
abline(h=med[2], lty=2) # h - the y-values(s) for horizontal line(s)
points(exemplary_entry[,1], rep(med[2], length(exemplary_entry[,1])), col='red')
var(exemplary_entry[,1])
# For the vertical-axis, x = med[1]
abline(v=med[1], lty=2) # v - the x'value(s) for horizontal line(s)
points(rep(med[1], length(exemplary_entry[,1])), exemplary_entry[,2], col='blue'))
# For the horizontal axis y = med[2]
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
abline(h=med[2], lty=2) # h - the y-values(s) for horizontal line(s)
points(exemplary_entry[,1], rep(med[2], length(exemplary_entry[,1])), col='red')
var(exemplary_entry[,1])
# For the vertical-axis, x = med[1]
abline(v=med[1], lty=2) # v - the x'value(s) for horizontal line(s)
points(rep(med[1], length(exemplary_entry[,1])), exemplary_entry[,2], col='blue')
# For the horizontal axis y = med[2]
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
abline(h=med[2], lty=2) # h - the y-values(s) for horizontal line(s)
points(exemplary_entry[,1], rep(med[2], length(exemplary_entry[,1])), col='red')
var(exemplary_entry[,1])
# For the vertical-axis, x = med[1]
abline(v=med[1], lty=2) # v - the x'value(s) for horizontal line(s)
points(rep(med[1], length(exemplary_entry[,1])), exemplary_entry[,2], col='blue')
var(X[,2])
# For the horizontal axis y = med[2]
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
abline(h=med[2], lty=2) # h - the y-values(s) for horizontal line(s)
points(exemplary_entry[,1], rep(med[2], length(exemplary_entry[,1])), col='red')
var(exemplary_entry[,1])
# For the vertical-axis, x = med[1]
abline(v=med[1], lty=2) # v - the x'value(s) for horizontal line(s)
points(rep(med[1], length(exemplary_entry[,1])), exemplary_entry[,2], col='blue')
var(exemplary_entry[,2])
exemplary_entry = data[, c('HTTP_time', 'Amazon_time')]
norm_minmax <- function(x){
(x - min(x)) / (max(x) - min(x))
}
exemplary_entry <- as.data.frame(lapply(exemplary_entr, norm_minmax))
exemplary_entry = data[, c('HTTP_time', 'Amazon_time')]
norm_minmax <- function(x){
(x - min(x)) / (max(x) - min(x))
}
exemplary_entry <- as.data.frame(lapply(exemplary_entry, norm_minmax))
look_up(exemplary_entry)
exemplary_entry = data[, c('HTTP_time', 'Amazon_time')]
norm_minmax <- function(x){
(x - min(x)) / (max(x) - min(x))
}
exemplary_entry <- as.data.frame(lapply(exemplary_entry, norm_minmax))
head(exemplary_entry)
#ggplot()+
#geom_point(Normalized_X, mapping = aes(x=Sepal.Length, y=Petal.Length, color='blue'))
exemplary_entry = data[, c('HTTP_time', 'Amazon_time')]
norm_minmax <- function(x){
(x - min(x)) / (max(x) - min(x))
}
exemplary_entry <- lapply(exemplary_entry, norm_minmax)
exemplary_entry
#ggplot()+
#geom_point(Normalized_X, mapping = aes(x=Sepal.Length, y=Petal.Length, color='blue'))
exemplary_entry = data[, c('HTTP_time', 'Amazon_time')]
norm_minmax <- function(x){
(x - min(x)) / (max(x) - min(x))
}
exemplary_entry <- lapply(exemplary_entry, norm_minmax)
exemplary_entry_df = as.data.frame(exemplary_entry)
head(exemplary_entry_df)
#ggplot()+
#geom_point(Normalized_X, mapping = aes(x=Sepal.Length, y=Petal.Length, color='blue'))
exemplary_entry = data[, c('HTTP_time', 'Amazon_time')]
norm_minmax <- function(x){
(x - min(x)) / (max(x) - min(x))
}
exemplary_entry <- lapply(exemplary_entry, norm_minmax)
exemplary_entry_df = as.data.frame(exemplary_entry)
head(exemplary_entry_df)
ggplot()+
geom_point(exemplary_entry_df, mapping = aes(x=HTTP_time, y=Amazon.time, color='blue'))
exemplary_entry = data[, c('HTTP_time', 'Amazon_time')]
norm_minmax <- function(x){
(x - min(x)) / (max(x) - min(x))
}
exemplary_entry <- lapply(exemplary_entry, norm_minmax)
exemplary_entry_df = as.data.frame(exemplary_entry)
head(exemplary_entry_df)
ggplot()+
geom_point(exemplary_entry_df, mapping = aes(x=HTTP_time, y=Amazon_time, color='blue'))
# Using the sample mean as a 0-dimensional reduction of data on the example of 'HTTP_time' and 'Amazon_time'
med <- colMeans(exemplary_entry) #PC 0
exemplary_entry = data[, c('HTTP_time', 'Amazon_time')]
norm_minmax <- function(x){
(x - min(x)) / (max(x) - min(x))
}
exemplary_entry <- as.data.frame(lapply(exemplary_entry, norm_minmax))
head(exemplary_entry)
ggplot()+
geom_point(exemplary_entry, mapping = aes(x=HTTP_time, y=Amazon_time, color='blue'))
# Using the sample mean as a 0-dimensional reduction of data on the example of 'HTTP_time' and 'Amazon_time'
med <- colMeans(exemplary_entry) #PC 0
#plotting the mean
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
for(i in 1:200)
lines(rbind(exemplary_entry[i,], med), col='red')
# For the horizontal axis y = med[2]
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
abline(h=med[2], lty=2) # h - the y-values(s) for horizontal line(s)
points(exemplary_entry[,1], rep(med[2], length(exemplary_entry[,1])), col='red')
var(exemplary_entry[,1])
# For the vertical-axis, x = med[1]
abline(v=med[1], lty=2) # v - the x value(s) for horizontal line(s)
points(rep(med[1], length(exemplary_entry[,1])), exemplary_entry[,2], col='blue')
var(exemplary_entry[,2])
# Using the sample mean as a 0-dimensional reduction of data on the example of 'HTTP_time' and 'Amazon_time'
med <- colMeans(exemplary_entry) #PC 0
#plotting the mean
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
for(i in 1:200)
lines(rbind(exemplary_entry[i,], med), col='red')
# For the horizontal axis y = med[2]
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
abline(h=med[2], lty=2) # h - the y-values(s) for horizontal line(s)
points(exemplary_entry[,1], rep(med[2], length(exemplary_entry[,1])), col='red')
var(exemplary_entry[,1])
# For the vertical-axis, x = med[1]
abline(v=med[1], lty=2) # v - the x value(s) for horizontal line(s)
points(rep(med[1], length(exemplary_entry[,1])), exemplary_entry[,2], col='blue')
var(exemplary_entry[,2])
# Using the sample mean as a 0-dimensional reduction of data on the example of 'HTTP_time' and 'Amazon_time'
med <- colMeans(exemplary_entry) #PC 0
#plotting the mean
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
for(i in 1:200)
lines(rbind(exemplary_entry[i,], med), col='red')
# For the horizontal axis y = med[2]
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
abline(h=med[2], lty=2) # h - the y-values(s) for horizontal line(s)
points(exemplary_entry[,1], rep(med[2], length(exemplary_entry[,1])), col='red')
var(exemplary_entry[,1])
# For the vertical-axis, x = med[1]
abline(v=med[1], lty=2) # v - the x value(s) for horizontal line(s)
points(rep(med[1], length(exemplary_entry[,1])), exemplary_entry[,2], col='blue')
var(exemplary_entry[,2])
theta <- seq(0, 2*pi, by = 2*pi/360) # angles
Var <- NULL
for(i in 1:length(theta))
{
a <- c(cos(theta[i]), sin(thera[i])) # directional vector
v <- cov(exemplary_entry %*% a) # projecting points
Var <- c(Var, v) # computing variance
}
a <- c(cos(theta[i]), sin(theta[i])) # directional vector
theta <- seq(0, 2*pi, by = 2*pi/360) # angles
Var <- NULL
for(i in 1:length(theta))
{
a <- c(cos(theta[i]), sin(theta[i])) # directional vector
v <- cov(exemplary_entry %*% a) # projecting points
Var <- c(Var, v) # computing variance
}
v <- cov(exemplary_entry[,1] %*% a) # projecting points
exemplary_entry
theta <- seq(0, 2*pi, by = 2*pi/360) # angles
Var <- NULL
for(i in 1:length(theta))
{
a <- c(cos(theta[i]), sin(theta[i])) # directional vector
v <- cov(exemplary_entry %*% a) # projecting points
Var <- c(Var, v) # computing variance
}
library(mvtnorm)
library(factoextra)
library(scales)
library(ellipse)
library(corrplot)
library(ggplot2)
library(dplyr)
lbirary(prcomp)
library(mvtnorm)
library(factoextra)
library(scales)
library(ellipse)
library(corrplot)
library(ggplot2)
library(dplyr)
library(prcomp)
install.packages("prcomp")
library(mvtnorm)
library(factoextra)
library(scales)
library(ellipse)
library(corrplot)
library(ggplot2)
library(dplyr)
library(prcomp)
data_pca <- (data, scale = True)
data_pca <- (data, scale = TRUE)
data_pca <- prcomp(data, scale = TRUE)
data
data[, 1-100]
data[, 1:100]
length(data)
data[1, 1-107]
data[, 2-106]
data[, 106]
data[, 107]
data[, 2:107]
data_pca <- data[,2-107]
#data_pca <- prcomp(data, scale = TRUE)
#str(data_pca)
data_pca <- data[,2-107]
data_pca <- prcomp(data, scale = TRUE)
data_pca <- data[,2-107]
data_pca
#data_pca <- prcomp(data, scale = TRUE)
#str(data_pca)
data_pca <- data[,2:107]
data_pca
#data_pca <- prcomp(data, scale = TRUE)
#str(data_pca)
data_pca <- data[,2:107]
data_pca
data_pca <- prcomp(data, scale = TRUE)
data_pca <- data[,2:106]
data_pca
data_pca <- prcomp(data, scale = TRUE)
data_pca <- prcomp(data_pca, scale = TRUE)
data_pca <- data[,2:106]
data_pca
data_pca <- prcomp(data_pca, scale = TRUE)
str(data_pca)
data_pca <- prcomp(data_pca, scale = TRUE)
data_pca <- data[,2:106]
data_pca
data_pca <- prcomp(data_pca, scale = TRUE)
data_pca <- data[,2:106]
data_pca
res <- prcomp(data_pca, scale = TRUE)
get_eig(res)
data_pca <- data[,2:106]
data_pca
res <- prcomp(data_pca, scale = TRUE)
get_eig(res)
fviz_eig(res)
plot(get_eig(res)$cumulative.variance.percent, type='b', axes=F, xlab='n', ylab='cumulative PVE', ylim=c(abline(h=100, col='blue')))
plot(get_eig(res)$cumulative.variance.percent, type='b', axes=F, xlab='n', ylab='cumulative PVE', ylim=c(abline(h=100, col='blue')))
plot(get_eig(res)$cumulative.variance.percent, type='b', axes=F, xlab='n', ylab='cumulative PVE', ylim=c)
plot(get_eig(res)$cumulative.variance.percent,
type='b', axes=F, xlab='Dimensions', ylab='cumulative PVE', ylim=c(0,100))
abline(h=100, col=alpha('blue',0.5))
abline(h=80, lty=2, col='red', lwd=2) # thresholding
box()
axis(2, at=0:100,labels=0:100)
axis(1,at=1:ncol(data_pca),labels=1:ncol(data_pca))
grid()
loading <- res$rotation
loadings
loadings <- res$rotation
loadings
fviz_pca_var(res,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE )    # Avoid text overlapping
fviz_pca_var(res,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = FALSE )    # Avoid text overlapping
fviz_pca_var(res,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE )    # Avoid text overlapping
plot.new()
par(mar = c(1,4,0,2), mfrow = c(4,1))
for(i in 1:4)
{
barplot(loadings[,i], ylim = c(-1, 1))
abline(h=0)
}
data_pca <- data[,2:106]
res <- prcomp(data_pca, scale = TRUE)
get_eig(res)
fviz_eig(res)
plot(get_eig(res)$cumulative.variance.percent,
type='b', axes=F, xlab='Dimensions', ylab='cumulative PVE', ylim=c(0,100))
abline(h=100, col=alpha('blue',0.5))
abline(h=80, lty=2, col='red', lwd=2) # thresholding
box()
axis(2, at=0:100,labels=0:100)
axis(1,at=1:ncol(data_pca),labels=1:ncol(data_pca))
grid()
help(fviz_eig)
data_pca <- data[,2:106]
res <- prcomp(data_pca, scale = TRUE)
get_eig(res)
fviz_eig(res)
fviz_eig(res, ncp = 50)
data_pca <- data[,2:106]
res <- prcomp(data_pca, scale = TRUE)
get_eig(res)
fviz_eig(res)
fviz_eig(res, ncp = 30)
data_pca <- data[,2:106]
res <- prcomp(data_pca, scale = TRUE)
get_eig(res)
fviz_eig(res)
fviz_eig(res, ncp = 25)
plot(get_eig(res)$cumulative.variance.percent,
type='b', axes=F, xlab='Dimensions', ylab='cumulative PVE', ylim=c(0,100))
abline(h=100, col=alpha('blue',0.5))
abline(h=80, lty=2, col='red', lwd=2) # thresholding
box()
axis(2, at=0:100,labels=0:100)
axis(1,at=1:ncol(data_pca),labels=1:ncol(data_pca))
grid()
help(res$rotation)
help(prcomp)
rotation$rotation
res$rotation
loadings
loadings[1]
loadings[PC1]
loadings[,1]
loadings <- res$rotation
loadings[, 1]
loadings[, 2]
loadings[, 3]
loadings[, 4]
loadings[, 5]
loadings[, 6]
help(fviz_pca_var)
fviz_pca_var(res,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), geom = 'point'
repel = TRUE )    # Avoid text overlapping
fviz_pca_var(res,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), geom = 'point',
repel = TRUE )    # Avoid text overlapping
fviz_pca_var(res,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), geom = 'point',
repel = FALSE )    # Avoid text overlapping
fviz_pca_var(res,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), geom = 'point',
repel = TRUE )    # Avoid text overlapping
fviz_pca_var(res,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), geom = c('point', 'text'),
repel = TRUE )    # Avoid text overlapping
fviz_pca_var(res,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), geom = c('point'),
repel = TRUE )    # Avoid text overlapping
loadings <- res$rotation
loadings[, 1]
loadings <- res$rotation
loadings[50, 1]
loadings <- res$rotation
loadings[0-20, 1]
loadings <- res$rotation
loadings[0-30, 1]
loadings[0-30, 2]
loadings <- res$rotation
PC1 = loadings[0-30, 1]
PC2 = loadings[0-30, 2]
PC1
install.packages("rrcov")
library(mvtnorm)
library(factoextra)
library(scales)
library(ellipse)
library(corrplot)
library(ggplot2)
library(dplyr)
library(rrcov)
pcarob <- PcaHubert(data_pca, k=4, alpha=0.75)
pcarob <- PcaHubert(data_pca, k=4, alpha=0.75)
pcarob
pcarob <- PcaHubert(data_pca, k=4, alpha=0.75)
par(mfrow=c(1,2))
plot(pcarob)
pcarob <- PcaHubert(data_pca, k=4, alpha=0.75)
par(mfrow=c(1,2))
plot(pcarob)
pcarob2 <- PcaHubert(data_pca, k=2)
plot(pcarob2)
pcarob <- PcaHubert(data_pca, k=4, alpha=0.75)
par(mfrow=c(10,20))
plot(pcarob)
pcarob <- PcaHubert(data_pca, k=4, alpha=0.75)
par(mfrow=c(1,2))
plot(pcarob)
pcarob2 <- PcaHubert(data_pca, k=2)
plot(pcarob2)
screeplot(pcarob)
screeplot(res) #Res is a standard PCA performed by prcomp(data_pca, scale = TRUE)
screeplot(pcarobm, main='Robust PCA')
screeplot(pcarob, main='Robust PCA')
screeplot(res, main='Standard PCA') #Res is a standard PCA performed by prcomp(data_pca, scale = TRUE)
pcarob <- PcaHubert(data_pca, k=4, alpha=0.75, scale = TRUE)
par(mfrow=c(1,2))
plot(pcarob)
pcarob2 <- PcaHubert(data_pca, k=2)
plot(pcarob2)
screeplot(pcarob, main='Robust PCA')
screeplot(res, main='Standard PCA') #Res is a standard PCA performed by prcomp(data_pca, scale = TRUE)
help(emdscale)
install.packages("stats19")
library(mvtnorm)
library(factoextra)
library(scales)
library(ellipse)
library(corrplot)
library(ggplot2)
library(dplyr)
library(rrcov)
library(stats)
help(cmdscale)
scaled <- cmdscale(data_pca)
loadings <- res$rotation
PC1 = order(loadings[0-30, 1])
PC2 = order(loadings[0-30, 2])
loadings <- res$rotation
PC1 = order(loadings[0-30, 1])
PC2 = order(loadings[0-30, 2])
PC1
loadings <- res$rotation
PC1 = loadings[0-30, 1]
PC2 = loadings[0-30, 2]
PC1
loadings <- res$rotation
PC1 = loadings[0-30, 1]
PC2 = loadings[0-30, 2]
plot(get_eig(pcarob)$cumulative.variance.percent,
type='b', axes=F, xlab='Dimensions', ylab='cumulative PVE', ylim=c(0,100))
help(screeplot)
screeplot(pcarob, main='Robust PCA', npcs=25)
screeplot(res, main='Standard PCA') #Res is a standard PCA performed by prcomp(data_pca, scale = TRUE)
screeplot(pcarob, main='Robust PCA')
screeplot(res, main='Standard PCA') #Res is a standard PCA performed by prcomp(data_pca, scale = TRUE)
data <- Users.Consumption.Behavior._2019
head(data)
data[,114]
Users.Consumption.Behavior._2019 <- read.csv("~/GitHub/SLLD_2022-_Users-Consumption-Behavior/Users Consumption Behavior _2019.csv")
View(Users.Consumption.Behavior._2019)
help(cmdscale())
help(cmdscale)
help(dist)
a <- dist(data_pca)
a
fviz_pca_var(res,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), geom = c('arrow'),
repel = TRUE )    # Avoid text overlapping
fviz_pca_var(res,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), geom = c('point'),
repel = TRUE )    # Avoid text overlapping
fviz_pca_var(res,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), geom = c('points'),
repel = TRUE )    # Avoid text overlapping
library(mvtnorm)
library(factoextra)
library(scales)
library(ellipse)
library(corrplot)
library(ggplot2)
library(dplyr)
library(rrcov)
library(stats)
fviz_pca_var(res,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), geom = c('points'),
repel = TRUE )    # Avoid text overlapping
fviz_pca_var(res,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), geom = c('point'),
repel = TRUE )    # Avoid text overlapping
