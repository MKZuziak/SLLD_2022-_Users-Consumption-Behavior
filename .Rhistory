library(mvtnorm)
library(factoextra)
library(scales)
library(ellipse)
library(corrplot)
library(ggplot2)
library(dplyr)
head(Users_Consumption_Behavior_2019)
Users.Consumption.Behavior._2019 <- read.csv("~/GitHub/SLLD_2022-_Users-Consumption-Behavior/Users Consumption Behavior _2019.csv")
View(Users.Consumption.Behavior._2019)
head(Users.Consumption.Behavior._2019)
data <- read.csv('Users.Consumption.Behavior._2019.csv')
data <- Users.Consumption.Behavior._2019
data <- Users.Consumption.Behavior._2019
head(data)
length(data)
data[,114]
# Adding a column based on other column:
data <- data%>% mutate(Target = case_when(cluster == "0" ~ "Low",
cluster == "1" ~ "Medium",
cluster==  "2" ~ "High"
))
data
sum(is.na(data))
sum(is.null(data))
dict <- sapply(data, n_distinct)
print(class(dict))
dict
unique(data[c("Viber_time_occupation")])#only two values 0 and 9.437501
table(data$Viber_time_occupation)#number of zeros 1248 and 1 for the value 9.43750
head(Users.Consumption.Behavior._2019)
data <- Users.Consumption.Behavior._2019
head(data)
data[,114]
# Adding a column based on other column:
data <- data%>% mutate(Target = case_when(cluster == "0" ~ "Low",
cluster == "1" ~ "Medium",
cluster==  "2" ~ "High"
))
sum(is.na(data))
sum(is.null(data))
dict <- sapply(data, n_distinct)
print(class(dict))
dict
library(mvtnorm)
library(factoextra)
library(scales)
library(ellipse)
library(corrplot)
library(ggplot2)
library(dplyr)
head(Users.Consumption.Behavior._2019)
data <- Users.Consumption.Behavior._2019
head(data)
data[,114]
# Adding a column based on other column:
data <- data%>% mutate(Target = case_when(cluster == "0" ~ "Low",
cluster == "1" ~ "Medium",
cluster==  "2" ~ "High"
))
sum(is.na(data))
sum(is.null(data))
dict <- sapply(data, n_distinct)
print(class(dict))
dict
# Detaching column containing clusters (column no. 114)
Users_Data <- Users_Consumption_Behavior_2019[,1:113]
# Detaching column containing clusters (column no. 114)
Users_data_overview <- data[,1:113]
data_copy <- Users_data_overview
data_copy
column_names <- c(names(data_copy))
column_names = column_names[2:113]
columns_overview = data.frame(df=column_names)
columns_overview
missing_values = c()
for(i in 2:ncol(Users_Data)){
# Null_values(0)
sums_zero = sum(data_copy[, i] == 0)
missing_val = sums_zero
missing_values = append(missing_values, missing_val)
}
missing_values = c()
for(i in 2:ncol(Users_data_overview)){
# Null_values(0)
sums_zero = sum(data_copy[, i] == 0)
missing_val = sums_zero
missing_values = append(missing_values, missing_val)
}
columns_overview$null_values <- c(missing_values)
sorted_overview <-columns_overview[order(columns_overview$null_values, decreasing=FALSE),]
sorted_overview
hist(sorted_overview$null_values,
main = "Histogram for missing values",
xlab = "No. of missing values",
border = "blue",
col = "green")
uniquelength <- sapply(data,function(x) length(unique(x)))
data <- subset(data, select=uniquelength>2)
uniquelength <- sapply(data,function(x) length(unique(x)))
data <- subset(data, select=uniquelength>2)
data
dict <- sapply(data, n_distinct)
print(class(dict))
dict
hist(dict,
main = "Histogram for missing values",
xlab = "No. of missing values",
border = "blue",
col = "green")
dict <- sapply(data, n_distinct)
print(class(dict))
dict[2]
dict <- sapply(data, n_distinct)
print(class(dict))
dict[:118]
dict <- sapply(data, n_distinct)
print(class(dict))
dict[0-114]
dict <- sapply(data, n_distinct)
print(class(dict))
dict[0-112]
dict <- sapply(data, n_distinct)
print(class(dict))
dict[0-5]
dict <- sapply(data, n_distinct)
print(class(dict))
dict[5]
dict <- sapply(data, n_distinct)
print(class(dict))
dict[114]
dict <- sapply(data, n_distinct)
print(class(dict))
dict[112]
Users_data_overview <- data[,1:113]
uniquelength <- sapply(data,function(x) length(unique(x)))
data <- subset(data, select=uniquelength>2)
data
dict <- sapply(data, n_distinct)
print(class(dict))
dict
dict <- sapply(data, n_distinct)
print(class(dict))
dict[107]
dict <- sapply(data, n_distinct)
print(class(dict))
dict[108]
dict <- sapply(data, n_distinct)
print(class(dict))
dict[0:100]
dict <- sapply(data, n_distinct)
print(class(dict))
dict[0:106]
dict <- sapply(data, n_distinct)
print(class(dict))
dict[0:107]
dict <- sapply(data, n_distinct)
print(class(dict))
dict[0:106]
hist(dict[0:106],
main = "Histogram for missing values",
xlab = "No. of missing values",
border = "blue",
col = "green")
uniquelength <- sapply(data,function(x) length(unique(x)))
data <- subset(data, select=uniquelength>2)
data
dict <- sapply(data, n_distinct)
print(class(dict))
dict[0:106]
hist(dict[0:106],
main = "Histogram for missing values",
xlab = "No. of missing values",
border = "blue",
col = "green")
column_names <- c(names(data_copy))
column_names = column_names[2:113]
columns_overview = data.frame(df=column_names)
missing_values = c()
for(i in 2:ncol(Users_data_overview)){
# Null_values(0)
sums_zero = sum(data_copy[, i] == 0)
missing_val = sums_zero
missing_values = append(missing_values, missing_val)
}
columns_overview$null_values <- c(missing_values)
sorted_overview <-columns_overview[order(columns_overview$null_values, decreasing=FALSE),]
sorted_overview
hist(sorted_overview$null_values,
main = "Histogram for missing values",
xlab = "No. of missing values",
border = "blue",
col = "green")
uniquelength <- sapply(data,function(x) length(unique(x)))
data <- subset(data, select=uniquelength>2)
data
dict <- sapply(data, n_distinct)
print(class(dict))
dict[0:106]
hist(dict[0:106],
main = "Histogram for missing values",
xlab = "No. of missing values",
border = "blue",
col = "green")
colClean <- function(x){ colnames(x) <- gsub("_occupation", "", colnames(x)); x }
data <- colClean(data)
colClean <- function(x){ colnames(x) <- gsub("_occupation", "", colnames(x)); x }
data <- colClean(data)
data
#correlation for just a few features
library(corrplot)
M<-cor(data[,2:5])
head(round(M,2))
#first type of correlation plot
corrplot(M, method="circle")
#second type of correlation plot
corrplot(M, method="number")
###Removing highly correlated variables
###Removing highly correlated variable#### It needs to be tested
cor_matrix <- cor(data[,1:107])  # Correlation matrix
cor_matrix
mu = c(1, 2)
mu
sig = cbind(c(1,1), c(1,4))
sig
n = 100
x <- rmvnorm(n, mu, sig)
x
plot(x, asp=1)
med = colMeans(X)
med = colMeans(x)
med
points(med[1], med[2], col='red', pch=16)
data[,:]
data
data[1]
data['hhtp_time']
data[, c('Amazon_time')]
exemplary_entry = data[, c('Amazon_time')]
med <- colMeans(exemplary_entry)
exemplary_entry = data[, c('Amazon_time', 'Apple_time')]
med <- colMeans(exemplary_entry)
#plotting the mean
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
exemplary_entry = data[, c('Amazon_time', 'HTTP_time')]
med <- colMeans(exemplary_entry)
#plotting the mean
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
exemplary_entry = data[, c('HTTP_time', 'Amazon_time')]
med <- colMeans(exemplary_entry)
#plotting the mean
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
# Using the sample mean as a 0-dimensional reduction of data on the example of 'HTTP_time' and 'Amazon_time'
exemplary_entry = data[, c('HTTP_time', 'Amazon_time')]
med <- colMeans(exemplary_entry)
#plotting the mean
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch-16)
# Using the sample mean as a 0-dimensional reduction of data on the example of 'HTTP_time' and 'Amazon_time'
exemplary_entry = data[, c('HTTP_time', 'Amazon_time')]
med <- colMeans(exemplary_entry)
#plotting the mean
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
for(i in 1:100)
lines(rbind(exemplary_entry[i,], med), col='red')
# Using the sample mean as a 0-dimensional reduction of data on the example of 'HTTP_time' and 'Amazon_time'
exemplary_entry = data[, c('HTTP_time', 'Amazon_time')]
med <- colMeans(exemplary_entry)
#plotting the mean
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
for(i in 1:200)
lines(rbind(exemplary_entry[i,], med), col='red')
plot(X, asp=1)
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
abline(h=med[2], lty=2)
# for the horizontal-axis
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
abline(h=med[2], lty=2)
# projecting data point on the axis
points(exemplary_entry[,1], red(med[2], n), col='red')
# for the horizontal-axis
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
abline(h=med[2], lty=2)
# projecting data point on the axis
points(exemplary_entry[,1], rep(med[2], n), col='red')
# for the horizontal-axis
plot(exemplary_entry, asp=1)
points(med[1], med[2], col='red', pch=16)
abline(h=med[2], lty=2)
# projecting data point on the axis
points(exemplary_entry[,1], rep(med[2], n), col='red')
